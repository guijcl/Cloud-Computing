---
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  name: "music"
  namespace: "production"
  labels:
    app: "music"
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  replicas: 3
  selector:
    matchLabels:
      app: "music"
  template:
    metadata:
      labels:
        app: "music"
    spec:
      containers:
      - name: "musics"
        image: "gcr.io/jenkinstest-351122/musics"
        ports:
        - containerPort: 50051
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "150m"
#        readinessProbe:
#          initialDelaySeconds: 10
#          httpGet:
#            path: "/health"
#            port: 50051
#        livenessProbe:
#          initialDelaySeconds: 10
#          httpGet:
#            path: "/health"
#            port: 50051
---

apiVersion: "v1"
kind: "Service"
metadata:
  name: "music"
  namespace: "production"
  labels:
    app: "music"
spec:
  ports:
  - name: "music-service"
    port: 50051
    targetPort: 50051
  - name: "music-prometheus"
    protocol: TCP
    port: 51051
    targetPort: 51051
  selector:
    app: "music"
  type: "LoadBalancer"
---  

apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  name: "artist"
  namespace: "production"
  labels:
    app: "artist"
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  replicas: 3
  selector:
    matchLabels:
      app: "artist"
  template:
    metadata:
      labels:
        app: "artist"
    spec:
      containers:
      - name: "artist"
        image: "gcr.io/jenkinstest-351122/artist"
        ports:
        - containerPort: 50055
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "150m"
#        readinessProbe:
#          initialDelaySeconds: 10
#          httpGet:
#            path: "/health"
#            port: 50055
#        livenessProbe:
#          initialDelaySeconds: 10
#          httpGet:
#            path: "/health"
#            port: 50055
---

apiVersion: v1
kind: Service
metadata:
  name: artist
  namespace: "production"
spec:
  type: LoadBalancer
  selector:
    app: artist
  ports:
  - name: "artist-service"
    port: 50055
    targetPort: 50055
  - name: "artist-prometheus"
    protocol: TCP
    port: 51055
    targetPort: 51055
---

apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  name: "account"
  namespace: "production"
  labels:
    app: "account"
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  replicas: 3
  selector:
    matchLabels:
      app: "account"
  template:
    metadata:
      labels:
        app: "account"
    spec:
      containers:
      - name: "account"
        image: "gcr.io/jenkinstest-351122/account"
        ports:
        - containerPort: 50052
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "150m"
#        readinessProbe:
#          initialDelaySeconds: 10
#          httpGet:
#            path: "/health"
#            port: 50052
#        livenessProbe:
#          initialDelaySeconds: 10
#          httpGet:
#            path: "/health"
#            port: 50052
---

apiVersion: v1
kind: Service
metadata:
  name: account
  namespace: "production"
spec:
  type: LoadBalancer
  selector:
    app: account
  ports:
  - name: service-account
    port: 50052
    targetPort: 50052
  - name:  prometheus-account
    protocol: "TCP"
    port: 51052
    targetPort: 51052
---

apiVersion: "autoscaling/v2beta2"
kind: "HorizontalPodAutoscaler"
metadata:
  name: "artist-hpa"
  namespace: "production"
spec:
  scaleTargetRef:
    kind: "Deployment"
    name: "artist"
    apiVersion: "apps/v1"
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 80
---

apiVersion: "autoscaling/v2beta2"
kind: "HorizontalPodAutoscaler"
metadata:
  name: "musics-hpa"
  namespace: "production"
spec:
  scaleTargetRef:
    kind: "Deployment"
    name: "musics"
    apiVersion: "apps/v1"
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 80
---

apiVersion: "autoscaling/v2beta2"
kind: "HorizontalPodAutoscaler"
metadata:
  name: "account-hpa"
  namespace: "production"
spec:
  scaleTargetRef:
    kind: "Deployment"
    name: "account"
    apiVersion: "apps/v1"
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 80

---
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  name: "api-gateway"
  namespace: "production"
  labels:
    app: "api-gateway"
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  replicas: 3
  selector:
    matchLabels:
      app: "api-gateway"
  template:
    metadata:
      labels:
        app: "api-gateway"
    spec:
      containers:
      - name: "api-gateway"
        image: "gcr.io/jenkinstest-351122/api-gateway"
        readinessProbe:
          initialDelaySeconds: 10
          httpGet:
            path: "/health"
            port: 80
        livenessProbe:
          initialDelaySeconds: 10
          httpGet:
            path: "/health"
            port: 80

---

apiVersion: "autoscaling/v2beta2"
kind: "HorizontalPodAutoscaler"
metadata:
  name: "api-gateway-hpa-fphq"
  namespace: "production"
  labels:
    app: "api-gateway"
spec:
  scaleTargetRef:
    kind: "Deployment"
    name: "api-gateway"
    apiVersion: "apps/v1"
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 80
---
apiVersion: "v1"
kind: Service
metadata:
  name: api-gateway
  namespace: "production"
spec:
  type: ClusterIP
  selector:
    app: api-gateway
  ports:
  - name: "service"
    port: 80
    targetPort: 80
---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: api-gateway-ingress
  namespace: "production"
spec:
  defaultBackend:
    service:
      name: api-gateway
      port:
        number: 80
      service:
  rules:
  - http:
      paths:
      - path: /api/ui
        pathType: ImplementationSpecific
        backend:
          service:
            name: api-gateway
            port:
              number: 80
    
